admin:
  access_log_path: "/dev/null"
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 8081
static_resources:
  listeners:
    - name: listener_0
      address:
        socket_address: { address: 0.0.0.0, port_value: 5001 }
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: auto
                stat_prefix: ingress_http
                access_log:
                  - name: envoy.access_loggers.stdout
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
                      log_format:
                        json_format:
                          protocol: "%PROTOCOL%"
                          http.request.method: "%REQ(:METHOD)%"
                          http.request.content.type: "%REQ(Content-TYPE)%"
                          http.request.x.user.agent: "%REQ(X-User-Agent)%"
                          client.address: "%DOWNSTREAM_REMOTE_ADDRESS%"
                          client.local.address: "%DOWNSTREAM_LOCAL_ADDRESS%"
                          server.address: "%UPSTREAM_REMOTE_ADDRESS%"
                          server.local.address: "%UPSTREAM_LOCAL_ADDRESS%"
                          http.response.code: "%RESPONSE_CODE%"
                          envoy.upstream.cluster: "%UPSTREAM_CLUSTER%"
                          "@timestamp": "%START_TIME%"
                          "response.flags": "%RESPONSE_FLAGS%"
                          http.request.headers.accept: "%REQ(ACCEPT)%"
                          http.request.headers.authority: "%REQ(:AUTHORITY)%"
                          http.request.headers.id: "%REQ(X-REQUEST-ID)%"
                          http.request.headers.x_forwarded_for: "%REQ(X-FORWARDED-FOR)%"
                          http.request.headers.x_forwarded_proto: "%REQ(X-FORWARDED-PROTO)%"

                route_config:
                  name: local_route
                  virtual_hosts:
                    - name: backend
                      domains: ["*"]
                      routes:
                        - match:
                            prefix: "/"
                          route:
                            cluster: eventstoredb
                            timeout: 0s
                            max_stream_duration:
                              grpc_timeout_header_max: 0s
                      cors:
                        allow_origin_string_match:
                          - prefix: "*"
                        allow_methods: GET, PUT, DELETE, POST, OPTIONS
                        allow_headers: keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,grpc-status-details-bin,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout,authorization
                        expose_headers: grpc-status-details-bin,grpc-status,grpc-message,authorization
                        max_age: "1728000"
                http_filters:
                  #                - name: envoy.filters.http.tap
                  #                  typed_config:
                  #                    "@type": type.googleapis.com/envoy.extensions.filters.http.tap.v3.Tap
                  #                    common_config:
                  #                      admin_config:
                  #                        config_id: test_config_id
                  - name: envoy.filters.http.lua
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                      default_source_code:
                        inline_string: |
                          -- Called on the request path.
                          function envoy_on_request(request_handle)
                            for key, value in pairs(request_handle:headers()) do
                              request_handle:logInfo("Request::Header::"..key..": "..value)
                            end
                          end
                          -- Called on the response path.
                          function envoy_on_response(response_handle)
                            for key, value in pairs(response_handle:headers()) do
                              response_handle:logInfo("Response::Header::"..key..": "..value)
                            end
                            for key, value in pairs(response_handle:trailers()) do
                              response_handle:logInfo("Response::Trailer::"..key..": "..value)
                            end
                          end
                  - name: envoy.filters.http.grpc_web
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.grpc_web.v3.GrpcWeb
                  - name: envoy.filters.http.cors
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.Cors
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
  #                - name: envoy.filters.http.grpc_http1_bridge
  #                  typed_config:
  #                    "@type": type.googleapis.com/envoy.extensions.filters.http.grpc_http1_bridge.v3.Config
  clusters:
    - name: eventstoredb
      connect_timeout: 0.25s
      type: logical_dns
      lb_policy: round_robin
      typed_extension_protocol_options:
        envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
          "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
          explicit_http_config:
            http2_protocol_options: {}
      load_assignment:
        cluster_name: cluster_0
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: host.docker.internal
                      port_value: 2113

